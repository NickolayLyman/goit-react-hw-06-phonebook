{"version":3,"sources":["components/ContactsList/ContactsList.module.css","App.module.css","components/ContactsFilter/ContactsFilter.module.css","components/Modal/Modal.module.css","redux/action.js","redux/selectors.js","components/Button/Button.jsx","components/ContactsList/ContactsList.jsx","components/ContactsFilter/ContactsFilter.jsx","components/ContactForm/ContactForm.jsx","components/Modal/Modal.jsx","App.js","redux/reducer.js","redux/store.js","index.js","components/ContactForm/ContactsForm.module.css"],"names":["module","exports","contactsAction","addContact","createAction","name","number","payload","id","shortid","generate","changeFilter","deleteContact","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","text","includes","getFilteredContacts","Button","onClick","className","value","type","ContactsList","useSelector","dispatch","useDispatch","map","st","listItem","btn","contactsActions","handleDeleteContact","ContactsFilter","label","input","onChange","event","target","ContactForm","onClose","useState","contactName","setContactName","contactNumber","setContactNumber","nameId","contactPhoneNumberId","handleFormChange","resetForm","onSubmit","preventDefault","find","contact","toast","error","form","htmlFor","modalRoot","document","querySelector","Modal","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","Overlay","currentTarget","modal","App","showModal","setShowModal","togleModal","container","title","subtitle","length","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,SAAW,+BAA+B,KAAO,2BAA2B,OAAS,6BAA6B,IAAM,4B,mBCA1ID,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,mBAAmB,SAAW,sBAAsB,IAAM,iBAAiB,IAAM,mB,mBCA9ID,EAAOC,QAAU,CAAC,MAAQ,8BAA8B,MAAQ,gC,mBCAhED,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,uB,uICY5CC,EAFQ,CAAEC,WARNC,YAAa,eAAe,SAACC,EAAMC,GAAP,MAAmB,CAChEC,QAAS,CAAEC,GAAIC,IAAQC,WAAYL,OAAMC,cAONK,aAJhBP,YAAa,wBAIiBQ,cAF7BR,YAAa,mBCTtBS,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAEtCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,QAEpCC,EAAqB,SAAAL,GAChC,IAAMC,EAAWF,EAAYC,GACvBI,EAASD,EAAUH,GAOzB,OAN4B,SAAAC,GAC1B,IAAMK,EAAmBF,EAAOG,cAChC,OAAON,EAASG,QAAO,SAAAI,GAAI,OACzBA,EAAKjB,KAAKgB,cAAcE,SAASH,MAG9BI,CAAoBT,I,OCGdU,EAdA,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC3C,OACE,wBAAQH,QAASA,EAASC,UAAWA,EAAWE,KAAMA,EAAtD,SACGD,K,iBC+BQE,EA7BM,WACnB,IAAMf,EAAWgB,YAAYZ,GACvBa,EAAWC,cAEjB,OACE,6BACGlB,EAASmB,KAAI,gBAAG1B,EAAH,EAAGA,GAAIH,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,qBAAaqB,UAAWQ,IAAGC,SAA3B,UACE,uBAAMT,UAAWQ,IAAG9B,KAApB,UAA2BA,EAA3B,OACA,sBAAMsB,UAAWQ,IAAG7B,OAApB,SAA6BA,IAC7B,cAAC,EAAD,CACEuB,KAAK,SACLF,UAAWQ,IAAGE,IACdX,QAAS,kBAVS,SAAAlB,GAAE,OAAIwB,EAASM,EAAgB1B,cAAcJ,IAUhD+B,CAAoB/B,IACnCoB,MAAM,aAPDpB,S,iBCcFgC,EAtBQ,WACrB,IAAMZ,EAAQG,YAAYd,GACpBe,EAAWC,cACjB,OACE,wBAAON,UAAWQ,IAAGM,MAArB,yBAEE,uBACEd,UAAWQ,IAAGO,MACdb,KAAK,OACLD,MAAOA,EACPe,SAAU,SAAAC,GAAK,OACbZ,EAASM,EAAgB3B,aAAaiC,EAAMC,OAAOjB,e,gDCyE9CkB,EAhFK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACGC,mBAAS,IADZ,mBAC5BC,EAD4B,KACfC,EADe,OAEOF,mBAAS,IAFhB,mBAE5BG,EAF4B,KAEbC,EAFa,KAG7BC,EAAS5C,IAAQC,WACjB4C,EAAuB7C,IAAQC,WAC/BsB,EAAWC,cACXlB,EAAWgB,YAAYlB,GAEvB0C,EAAmB,SAAAX,GAAU,IAAD,EACRA,EAAMC,OAAtBxC,EADwB,EACxBA,KAAMuB,EADkB,EAClBA,MAEd,OAAQvB,GACN,IAAK,OACH6C,EAAetB,GACf,MACF,IAAK,SACHwB,EAAiBxB,GACjB,MACF,QACE,SAuBA4B,EAAY,WAChBN,EAAe,IACfE,EAAiB,KAGnB,OACE,uBAAMK,SA1BiB,SAAAb,GAEvB,GADAA,EAAMc,iBACc,KAAhBT,EAIJ,GAAsB,KAAlBE,EAAJ,CAIA,GAAIpC,EAAS4C,MAAK,SAAAC,GAAO,OAAIA,EAAQvD,OAAS4C,KAG5C,OAFAY,IAAMC,MAAN,UAAeb,EAAf,4BACAO,IAGFxB,EAASM,EAAgBnC,WAAW8C,EAAaE,IACjDK,IACAT,SAVEc,IAAMC,MAAM,6BAJZD,IAAMC,MAAM,uBAuBoBnC,UAAWQ,IAAG4B,KAAhD,UACE,wBAAOC,QAASX,EAAQ1B,UAAWQ,IAAGM,MAAtC,iBAEE,uBACEd,UAAWQ,IAAGO,MACdb,KAAK,OACLxB,KAAK,OACLuB,MAAOqB,EACPN,SAAUY,EACV/C,GAAI6C,OAGR,wBAAOW,QAASV,EAAsB3B,UAAWQ,IAAGM,MAApD,yBAEE,uBACEd,UAAWQ,IAAGO,MACdb,KAAK,OACLxB,KAAK,SACLuB,MAAOuB,EACPR,SAAUY,EACV/C,GAAI8C,OAGR,cAAC,EAAD,CAAQzB,KAAK,SAASF,UAAWQ,IAAGE,IAAKT,MAAM,uBC5E/CqC,EAAYC,SAASC,cAAc,eAgC1BC,EA9BD,SAAC,GAAiB,IAAfrB,EAAc,EAAdA,QACfsB,qBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWC,GAC5B,WACLF,OAAOG,oBAAoB,UAAWD,OAI1C,IAAMA,EAAgB,SAAA5B,GACD,WAAfA,EAAM8B,MACR3B,KAUJ,OAAO4B,uBACL,qBAAKhD,UAAWQ,IAAGyC,QAASlD,QAPF,SAAAkB,GACtBA,EAAMiC,gBAAkBjC,EAAMC,QAChCE,KAKF,SACE,qBAAKpB,UAAWQ,IAAG2C,MAAnB,SACE,cAAC,EAAD,CAAa/B,QAASA,QAG1BkB,I,iBCEWc,I,EAAAA,EAxBf,WAAgB,IAAD,EACqB/B,oBAAS,GAD9B,mBACNgC,EADM,KACKC,EADL,KAEPlE,EAAWgB,YAAYZ,GAEvB+D,EAAa,kBAAMD,GAAcD,IACvC,OACE,sBAAKrD,UAAWQ,IAAGgD,UAAnB,UACE,oBAAIxD,UAAWQ,IAAGiD,MAAlB,uBACA,cAAC,EAAD,CAAQ1D,QAASwD,EAAYvD,UAAWQ,IAAGE,IAAKT,MAAM,iBACrDoD,GAAa,cAAC,EAAD,CAAOjC,QAASmC,IAC9B,oBAAIvD,UAAWQ,IAAGkD,SAAlB,sBACCtE,EAASuE,OAAS,GAAK,cAAC,EAAD,IACvBvE,EAASuE,OAAS,GAAK,cAAC,EAAD,IACxB,cAAC,IAAD,CACEC,SAAS,aACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAc,Q,wECzBhB3E,EAAQ4E,YAAc,IAAD,mBACxBC,EAAQ1F,YAAa,SAACW,EAAD,OAAUP,EAAV,EAAUA,QAAV,4BAA4BO,GAA5B,CAAmCP,OADhC,cAExBsF,EAAQjF,eAAgB,SAACE,EAAD,OAAUP,EAAV,EAAUA,QAAV,OACvBO,EAAMI,QAAO,qBAAGV,KAAgBD,QAHT,IAMrBW,EAAS0E,YAAc,GAAD,eACzBC,EAAQlF,cAAe,SAACmF,EAAD,YAAMvF,YAGjBwF,cAAgB,CAAE/E,QAAOE,WCClC8E,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAGIC,EAAyB,CAC7BC,IAAK,WACLC,YACAC,UAAW,CAAC,WAGDC,EAAQC,YAAe,CAClCC,QAAS,CACPlG,SAAUmG,YAAeP,EAAwBQ,IAEnDnB,aACAoB,UAAUC,IAGCC,EAAYC,YAAaR,G,YC7BtCS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAaY,QAAS,KAAML,UAAWA,EAAvC,SACE,cAAC,EAAD,UAINpD,SAAS0D,eAAe,U,kBChB1B5H,EAAOC,QAAU,CAAC,KAAO,2BAA2B,MAAQ,4BAA4B,MAAQ,4BAA4B,IAAM,0BAA0B,MAAQ,+B","file":"static/js/main.33134de0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactsList_listItem__aQsjb\",\"name\":\"ContactsList_name__32RaM\",\"number\":\"ContactsList_number__OA1hn\",\"btn\":\"ContactsList_btn__2Xk9h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2SVkG\",\"title\":\"App_title__DS-hN\",\"subtitle\":\"App_subtitle__3VDGa\",\"btn\":\"App_btn__3Bo7_\",\"bth\":\"App_bth__3tYIT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactsFilter_label__1rADm\",\"input\":\"ContactsFilter_input__15kyw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__gp7Hd\",\"modal\":\"Modal_modal__2fIrt\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contact/add', (name, number) => ({\r\n  payload: { id: shortid.generate(), name, number },\r\n}));\r\n\r\nconst changeFilter = createAction('contacts/chageFilter');\r\n\r\nconst deleteContact = createAction('contact/delete');\r\n\r\nconst contactsAction = { addContact, changeFilter, deleteContact };\r\n\r\nexport default contactsAction;\r\n","export const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const getFilteredContacts = contacts => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(text =>\r\n      text.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n  return getFilteredContacts(contacts);\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Button = ({ onClick, className, value, type }) => {\r\n  return (\r\n    <button onClick={onClick} className={className} type={type}>\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\nButton.propTypes = {\r\n  onclick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  value: PropTypes.string,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default Button;\r\n","import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsActions from '../../redux/action';\r\nimport { getVisibleContacts } from '../../redux/selectors';\r\nimport Button from '../Button';\r\nimport st from './ContactsList.module.css';\r\n\r\nconst ContactsList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const handleDeleteContact = id => dispatch(contactsActions.deleteContact(id));\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={st.listItem}>\r\n          <span className={st.name}>{name}:</span>\r\n          <span className={st.number}>{number}</span>\r\n          <Button\r\n            type=\"button\"\r\n            className={st.btn}\r\n            onClick={() => handleDeleteContact(id)}\r\n            value=\"Delete\"\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\nexport default ContactsList;\r\n","import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsActions from '../../redux/action';\r\nimport { getFilter } from '../../redux/selectors';\r\nimport st from './ContactsFilter.module.css';\r\n\r\nconst ContactsFilter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className={st.label}>\r\n      Find contact\r\n      <input\r\n        className={st.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={event =>\r\n          dispatch(contactsActions.changeFilter(event.target.value))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nContactsFilter.propTypes = {\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default ContactsFilter;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsActions from '../../redux/action';\r\nimport { getContacts } from '../../redux/selectors';\r\nimport Button from '../Button';\r\nimport st from './ContactsForm.module.css';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst ContactForm = ({ onClose }) => {\r\n  const [contactName, setContactName] = useState('');\r\n  const [contactNumber, setContactNumber] = useState('');\r\n  const nameId = shortid.generate();\r\n  const contactPhoneNumberId = shortid.generate();\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContacts);\r\n\r\n  const handleFormChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setContactName(value);\r\n        break;\r\n      case 'number':\r\n        setContactNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    if (contactName === '') {\r\n      toast.error('Enter contact name');\r\n      return;\r\n    }\r\n    if (contactNumber === '') {\r\n      toast.error('Enter contact number');\r\n      return;\r\n    }\r\n    if (contacts.find(contact => contact.name === contactName)) {\r\n      toast.error(`${contactName} is already exists`);\r\n      resetForm();\r\n      return;\r\n    }\r\n    dispatch(contactsActions.addContact(contactName, contactNumber));\r\n    resetForm();\r\n    onClose();\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setContactName('');\r\n    setContactNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleFormSubmit} className={st.form}>\r\n      <label htmlFor={nameId} className={st.label}>\r\n        Name\r\n        <input\r\n          className={st.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={contactName}\r\n          onChange={handleFormChange}\r\n          id={nameId}\r\n        />\r\n      </label>\r\n      <label htmlFor={contactPhoneNumberId} className={st.label}>\r\n        Phone Number\r\n        <input\r\n          className={st.input}\r\n          type=\"text\"\r\n          name=\"number\"\r\n          value={contactNumber}\r\n          onChange={handleFormChange}\r\n          id={contactPhoneNumberId}\r\n        />\r\n      </label>\r\n      <Button type=\"submit\" className={st.btn} value=\"Create contact\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onClose: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n","import { createPortal } from 'react-dom';\r\nimport { useEffect } from 'react';\r\nimport st from './Modal.module.css';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nconst Modal = ({ onClose }) => {\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  });\r\n\r\n  const handleKeyDown = event => {\r\n    if (event.code === 'Escape') {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div className={st.Overlay} onClick={handleBackdropClick}>\r\n      <div className={st.modal}>\r\n        <ContactForm onClose={onClose} />\r\n      </div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import ContactsList from './components/ContactsList';\nimport ContactsFilter from './components/ContactsFilter';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getVisibleContacts } from './redux/selectors';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Button from './components/Button';\nimport Modal from './components/Modal';\nimport st from './App.module.css';\n\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n  const contacts = useSelector(getVisibleContacts);\n\n  const togleModal = () => setShowModal(!showModal);\n  return (\n    <div className={st.container}>\n      <h1 className={st.title}>PHONEBOOK</h1>\n      <Button onClick={togleModal} className={st.btn} value=\"Add  contact\" />\n      {showModal && <Modal onClose={togleModal} />}\n      <h2 className={st.subtitle}>Contacts</h2>\n      {contacts.length > 1 && <ContactsFilter />}\n      {contacts.length > 0 && <ContactsList />}\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={true}\n        newestOnTop={false}\n        closeOnClick={true}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './action';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter });\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contactReducer from './reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst phonebookPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(phonebookPersistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport './base.css';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__2xKpi\",\"label\":\"ContactsForm_label__2c4z4\",\"input\":\"ContactsForm_input__3CPTZ\",\"btn\":\"ContactsForm_btn__206Ev\",\"error\":\"ContactsForm_error__zr_8N\"};"],"sourceRoot":""}